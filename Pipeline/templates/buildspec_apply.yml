#This solution, non-production-ready template describes AWS Codepipeline based CICD Pipeline for terraform code deployment.
#Â© 2023 Amazon Web Services, Inc. or its affiliates. All Rights Reserved.
#This AWS Content is provided subject to the terms of the AWS Customer Agreement available at
#http://aws.amazon.com/agreement or other written agreement between Customer and either
#Amazon Web Services, Inc. or Amazon Web Services EMEA SARL or both.

version: 0.2

env:
  variables:
    CODE_SRC_DIR: "."
    TF_VERSION: "1.3.7"

phases:
  install:
    runtime-versions:
      python: 3.9
    commands:
      - "curl -s -qL -o terraform.zip https://releases.hashicorp.com/terraform/${TF_VERSION}/terraform_${TF_VERSION}_linux_amd64.zip"
      - "unzip -o terraform.zip"
      - "mv terraform /bin"
      - "rm terraform.zip"
      # Install kubectl
      # - curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/kubectl
      # - chmod +x ./kubectl
      # - mv ./kubectl /usr/local/bin
      # #You can also install aws-iam-authenticator if needed
      # - curl -o aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/aws-iam-authenticator
      # - chmod +x ./aws-iam-authenticator
      # - mv ./aws-iam-authenticator /usr/local/bin
      # - echo "kubectl installed successfully"
      # - curl --location -o /usr/local/bin/eksctl "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64"
      # - chmod +x /usr/local/bin/eksctl
      # - eksctl version
      # Install kubectl
      - curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/kubectl
      - chmod +x ./kubectl
      - mv ./kubectl /usr/local/bin
      #You can also install aws-iam-authenticator if needed
      - curl -o aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/aws-iam-authenticator
      - chmod +x ./aws-iam-authenticator
      - mv ./aws-iam-authenticator /usr/local/bin
      - echo "kubectl installed successfully"
      - curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp     
      - sudo mv /tmp/eksctl /usr/local/bin
      - ls -al /usr/local/bin/eksctl
  pre_build:
    commands:
      # # Setup kubeconfig (Replace <cluster_name> and <region> with your EKS cluster details)
      # - aws eks --region us-east-1 update-kubeconfig --name AWS-EKS
      # - eksctl utils associate-iam-oidc-provider --region us-east-1  --cluster  AWS-EKS   --approve
      # # Get node names
      # - nodes=$(kubectl get nodes -o jsonpath='{.items[*].metadata.name}')
      # # Convert to array
      # - IFS=' ' read -r -a node_array <<< "$nodes"
      # # Label the first node
      # - kubectl label nodes "${node_array[0]}" app=backend
      # # Label the second node
      # - kubectl label nodes "${node_array[1]}" app=database
      # Setup kubeconfig (Replace <cluster_name> and <region> with your EKS cluster details)

  build:
    commands:
      - "cd ${CODEBUILD_SRC_DIR}/${CODE_SRC_DIR}"
      - "echo ## TERRAFORM APPLY : Starting with the Terraform Apply"
      - "terraform apply -input=false -lock=false tfapply"
      - aws eks --region us-east-1 update-kubeconfig --name AWS-EKS
      - eksctl utils associate-iam-oidc-provider --region us-east-1  --cluster  AWS-EKS   --approve
      # Get node names
      #- nodes=$(kubectl get nodes -o jsonpath='{.items[*].metadata.name}')
      # - echo $nodes
      # # Convert to array
      # - IFS=' ' read -r -a node_array <<< "$nodes"
      # - echo $node_array[0]
      # # Label the first node

      - |
        nodes=$(kubectl get nodes -o jsonpath='{.items[*].metadata.name}')
        IFS=' ' read -ra node_array <<< "$nodes"
        echo "First node: ${node_array[0]}"
        echo "Second node: ${node_array[1]}"
        export node1=${node_array[0]}
        export node2=${node_array[1]}
      - echo "welcome"
      - echo $nodes
      - echo  $node_array[1]
      # Run your kubectl commands here
      - "cd ${CODEBUILD_SRC_DIR}/${CODE_SRC_DIR}"
      - "echo ${CODEBUILD_SRC_DIR}/${CODE_SRC_DIR}"
      - "ls -al ${CODEBUILD_SRC_DIR}/${CODE_SRC_DIR}"
      - kubectl label nodes $node2  app=database --overwrite
      - kubectl label nodes $node1  app=backend --overwrite
      - kubectl get pods -n backend
      - kubectl apply -f ${CODEBUILD_SRC_DIR}/${CODE_SRC_DIR}/spring3hibernatejava/app/namespace.yaml
      - kubectl apply -f ${CODEBUILD_SRC_DIR}/${CODE_SRC_DIR}/spring3hibernatejava/mysql/
      - kubectl apply -f ${CODEBUILD_SRC_DIR}/${CODE_SRC_DIR}/spring3hibernatejava/app/

artifacts:
  files:
    - '**/*'